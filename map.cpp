#include "map.h"
#include "QDebug"

Map::Map()
{
  map_ptr = nullptr;
}

unsigned int Map::getArray_x() const
{
  return array_x;
}

unsigned int Map::getArray_y() const
{
  return array_y;
}

void Map::loadMapFromFile(const QString &file_name) //–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
{
  std::fstream file(file_name.toStdString());

  file >> array_x >> array_y; //—Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –≤ –±–ª–æ–∫–∞—

  max_x = PIXMAP_SIZE*array_x;
  max_y = PIXMAP_SIZE*array_y;

  unsigned int map_size = array_x + array_y*array_x;  //–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  map_ptr = new Block[map_size]; //—Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑–º–µ—Ä–æ–º map_size
  unsigned int type;

  for(unsigned int counter_y = 0; counter_y < array_y; counter_y++){
      for(unsigned int counter_x = 0; counter_x < array_x; counter_x++){
          file >> type;  //—Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ –∏ –∑–∞–ø–∏—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∞
          map_ptr[counter_x + counter_y*array_x].createBlock(PIXMAP_SIZE*counter_x, PIXMAP_SIZE*counter_y, type);
        }
    }

  file.close();
}

Block& Map::getBlockAt(qreal x, qreal y) const
{
  unsigned int x_mod = static_cast<unsigned int>( x -  (static_cast<unsigned int>(x) % PIXMAP_SIZE ) ) / PIXMAP_SIZE;
  unsigned int y_mod = static_cast<unsigned int>( y -  (static_cast<unsigned int>(y) % PIXMAP_SIZE ) ) / PIXMAP_SIZE;

  return map_ptr[x_mod + array_x*y_mod];
}

Block *Map::getMap_ptr() const
{
  return map_ptr;
}

unsigned int Map::getMax_y() const
{
  return max_y;
}

unsigned int Map::getMax_x() const
{
  return max_x;
}

Map::~Map()
{
  delete []map_ptr;
}
